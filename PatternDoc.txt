Contents
========
--------

General
=======

Abstract Class
--------------
A class that cannot be instantiated itself, it provides a blueprint or contract that inheriting classes must fulfill before the code will run. A class that 'extends' the abstract can only extend one class
abstract class defined by :- abstract Class <className> {
inheriting class extends abstract with :- Class <className> extends <AbstractClassName>{


Interface
---------

An interface is a class that also provides a blueprint or contract an inheriting class must fulfill before it will instantiate, a class that implements the interface can implement as many interfaces as it likes
interface class defined by :- interface <className> {  
inheriting class implements interface with :- class <className> implements <interfaceOneClassName>,<interfaceTwoClassName>... {


Patterns
========

Strategy
--------
Strategy pattern used when many classes that inherit from a a parent class will often share algorithms within the same method eg cats and horses both canter so would share the method for canter. Can decide at runtime which algorithm to use.

Observer
--------
A pattern where an instance notifies a watching class if it changes, classes can attach and detach themselves from being observed at any point. Useful for reporting auditing type systems.

Decorator
Factory

Singleton
---------
A singleton is a pattern where only one instance of the class can ever exist, useful for services and similar.

multiton
--------

The multiton pattern is an extension of the singleton pattern such that only one instance of each type can be instantiated.

Command
Adapter
Facade
Template Method
Iterator
Composite
State
Proxy
Compound Patterns

Extra Patterns
--------------
Bridge
Builder
Chain of Reposnsibility
Flyweight
Interpreter
Mediator
Memento
Prototype
Visitor